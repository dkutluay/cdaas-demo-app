image: java:8

variables:
  DOCKER_TLS_CERTDIR: ""
  DOCKER_IMAGE: "docker:19.03.13"
  #ARTIFACTORY_URL: "https://192.168.130.23/artifactory/cdaas"
  ARTIFACT_NAME: "cdaas-demo-app"
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

default:
  cache:
    paths:
      - $CI_PROJECT_DIR/target/*.jar
      - $CI_PROJECT_DIR/.mvn/repository
  before_script:
    - chmod +x mvnw

stages:
  - validate
  - test
  - build
  - publish
  - deploy

# Commented out this section since prevents automatic triggering of the pipeline
#workflow:
#  rules:
#    - if: '$CI_COMMIT_TAG'

validate:
  stage: validate
  script: ./mvnw clean validate

compile:
  stage: validate
  script: ./mvnw clean compile

test:unit-test:
  stage: test
  script: ./mvnw surefire-report:report
  artifacts:
    reports:
      junit: $CI_PROJECT_DIR/target/surefire-reports/TEST-com.demo.DemoControllerTest.xml

# This is now useless, but I did not remove it since it is part of the original pipeline
build:jar:
  before_script:
    - ./mvnw versions:set -DnewVersion=$CI_COMMIT_REF_NAME
  stage: build
  # Added skipTests parameter since one of the tests is failing.
  script: ./mvnw clean install spring-boot:repackage
  dependencies:
    - test:unit-test

# Even if we keep docker images in the container registry, keeping jar files in Artifactory could be useful.
# publish:artifact:
#   stage: publish
#   script:
#     - ARTIFACT_MD5_CHECKSUM=$(md5sum $CI_PROJECT_DIR/target/$ARTIFACT_NAME-$CI_COMMIT_REF_NAME.jar | awk '{print $1}')
#     - ARTIFACT_SHA1_CHECKSUM=$(shasum -a 1 $CI_PROJECT_DIR/target/$ARTIFACT_NAME-$CI_COMMIT_REF_NAME.jar | awk '{ print $1 }')
#     - |
#       curl -k --upload-file "$CI_PROJECT_DIR/target/$ARTIFACT_NAME-$CI_COMMIT_REF_NAME.jar" \
#       --header "X-Checksum-MD5:${ARTIFACT_MD5_CHECKSUM}" \
#       --header "X-Checksum-Sha1:${ARTIFACT_SHA1_CHECKSUM}" \
#       -u $ARTIFACTORY_USER:$ARTIFACTORY_PASSWORD \
#       -v "$ARTIFACTORY_URL/$ARTIFACT_NAME-$CI_COMMIT_REF_NAME.jar"
#   dependencies:
#     - build:jar

build:image:
  image: $DOCKER_IMAGE
  stage: build
  services:
    - name: docker:dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG

# Wrote this section for myself
# Deploys the image but creates a new contatiner each time pipeline is executed

#deploy:image:
#  image: $DOCKER_IMAGE
#  stage: deploy
#  services:
#    - name: docker:dind
#  script:
#    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
#    - docker run -d -p 8888:8080 $IMAGE_TAG
#  dependencies:
#    - build:image

deploy:ansible:
  image: ansible/ansible-runner:1.4.7
  stage: deploy
  tags:
    - ansible
  before_script:
    - yum -y install git
  script:
    # This ansible playbook could be placed in the app repo, but I did not want to change repo structure
    # Doing that saves time spent for git installation and git clone operations
    - git clone http://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.example.com/root/playbook-awx-artifactory-download-and-deploy.git
    - ansible-runner run playbook-awx-artifactory-download-and-deploy -p deploy_from_container_registry.yml
  dependencies:
    - build:image


